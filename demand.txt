一、瀑布流
    - 布局
    - 文档，窗口，滚动
    - 面向对象的封装： this,that
    
二、报障系统
    需求分析
        - 报障
            用户：
                提交报账单
                自己报障记录
            处理着：
                查看所有人报障单
                处理报账单
                
        - 知识库（博客）
            主页：
                展示最新文章
                展示最热文章
                展示评论最多文章
                分类查看
            个人博客：
                个人博客主页
                个人博客文章详细：赞，踩，评论
                个人博客分类：标签、分类、时间
                个人博客主题定制：后台修改
            后台管理：
                个人信息管理
                个人标签
                个人分类
                个人文章
            
    数据库设计：
        
        用户表： uid,username,pwd,email,avatar(头像),create_time,fans(m2m)
        博客表： bid,site(个人博客前缀),theme,title,user : FK(用户表,unique)=OneToOne(用户表)
        互粉表： id  明星ID（FK用户表）   粉丝ID（FK用户表）
                          2                   1
                          1                   2
                          1                   3
                          
        报障单：tid  title   detail   user（用户表）   processor（用户表 null）  status(待处理，处理中，已处理)  
	     create_time solution, ptime(处理时间), 处理评价(满意,一般,不满意)
        
        
        分类表：nid, titile,blog: Fk(博客id)
        
        标签表：nid, titile,blog: Fk(博客bid)
        
        
        文章表：id, title, summary(文章简介), read_count, comment_count,  up_count,  down_count,  tags(标签 m2m)
	     ctime, category:FK(分类表),  blog :FK(博客表) 主站分类（choices）article_type_id(文章类型):python,linux
        
        文章详细：content(文章详细), article: OneToOne(文章表)
        
        文章标签关系：  article :FK文章ID  tag:FK 标签ID
        
        
        赞踩文章关系： article:FK文章ID   user:FK 用户ID   up 赞或踩（True，False）  联合唯一索引：（文章ID  用户ID ）
        
        评论表：id,  content   ,create_time   article:FK(文章), user:FK(user), reply:self(自关联)
        
        
        
三、程序目录结构

    project
        - APP(repository) - 数据仓库（操作数据Model）
        - APP(backend)    - 后台管理
        - APP(web)        - 首页，个人博客
        - utils           - 工具包（公共模块）
        

        
        
项目安排：
    1. 需求分析
    2. 数据库设计思路
    3. 实现数据库设计（Admin添加数据）
    4. 主站：分类(主站)查看+分页
        - 标题菜单：母版
        - 登录成功： session['username'] = 'root'
        - 主页html：
                判断是否有用户：显示用户名
                否则          ： 登录，注册
                <div class="pg-header">
                    {% if request.session.username %}
                        <a>{{ request.session.username }}</a>
                    {% else %}
                        <a>登录</a><a>注册</a>
                    {% endif %}
                </div>
                    
        - 博文内容布局：
                div   div  -> float   => 图片下方空白
                <a></a>asdflkjasdfkj  => 文字环绕
        - URL分类筛选：
            url(r'^all/(?P<article_type_id>\d+).html$', home.index, name='index'),
            url(r'^', home.index),
        
            index根据kwargs判断是否分类查询？
            a. 生成分类菜单
            b. 考虑是否选中
            c. 根据条件model.xxx.objects.filter(**kwargs)
            
        - URL:
            from django.urls import reverse
            
            url(r'^all/(?<article_type_id>\d+).html$', home.index, name='index'),
                在HTML中：{% url "index" article_type_id=1 %}             => all/1.html
                在views中：reverse('index',kwargs={"article_type_id":1})  =>all/1.html
            
            url(r'^all/(\d+).html$', home.index, name='index'),
                在HTML中：{% url "index" 1 %}          =>all/1.html
                在views中：reverse('index',args=(1,))  =>all/1.html
        
        - 利用reverse+分页组件完成：分类查看+分页 
        
    5. 登录，注册
        - 密码：数字，字母，特殊字符
        - 密码两次输入一致
        
        提交：
            v = MyForm(request.GET) # 6个字段
            if v.is_valid():
                pass
        
        密码示例：RegexField自定义密码验证规则
        
            password = forms.RegexField(
                '^(?=.*[0-9])(?=.*[a-zA-Z])(?=.*[!@#$\%\^\&\*\(\)])[0-9a-zA-Z!@#$\%\^\&\*\(\)]{8,32}$',
                min_length=12,
                max_length=32,
                error_messages={'required': '密码不能为空.',
                                'invalid': '密码必须包含数字，字母、特殊字符',
                                'min_length': "密码长度不能小于8个字符",
                                'max_length': "密码长度不能大于32个字符"}
            )
              


            class RegisterForm(BaseForm, django_forms.Form):
                username = django_fields.CharField()
                password = django_fields.CharField()
                confirm_pwd = django_fields.CharField()

                def clean(self):
                    v1 = self.cleaned_data['password']
                    v2 = self.cleaned_data['confirm_pwd']
                    if v1 == v2:
                        pass
                    else:
                        from django.core.exceptions import ValidationError
                        raise ValidationError('密码输入不一致')
        
            
            def register(request):
                v = RegisterForm(request.POST)
                if v.is_valid():
                    pass
                else:
                    v.errors['username']
                    v.errors['__all__']
                    v.errors[NON_FIELD_ERRORS]
                    {
                        __all__: [],
                        username: [],
                        password: []
                        confirm_pwd: []
                    }
                
                return render(request, 'register.html', {'v':v})
                
                
            register.html
            
                {{v.errors.username.0}}
                
                {{v.non_field_errors}}
        
        
        补充： 验证码
            
            1.点击更换验证码
            2.验证码到底是否有必要是图片？有
            3.
                服务端：
                    a. session中保存随机验证码，如：87fs
                    b. 在页面中显示图片
                客户端：
                    a. 显示图片
                    b. 在cookie中保存sessionid
                    
                    
                验证码图片
                验证码字符串:87fs
                sessionid='asdfasdfasdfasdfasdfasdf09'
                {
                    "asdfasdfasdfasdfasdfasdf09": {'ck': 87fs}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                    "ffsdfsdfsdfsdfsqq243234234": {'ck': 98fd}
                }
            
            
                ffsdfsdfsdfsdfsqq243234234 : 9999
                
                使用：
                    check_code.py
                    Monaco.ttf  字体文件
                    
                    <img src="/shizhengwen.html" onclick="changeImg(this);">
            
                    <script>
                        function changeImg(ths) {
                            ths.src = ths.src + "?";
                        }
                    </script>
            
            
            
                    def xiaoyun(request):
                        if request.method == "GET":
                            return render(request,'xiaoyun.html')
                        else:
                            input_code = request.POST.get('code')
                            check_cd = request.session['check_code']
                            print(input_code,check_cd)
                            return HttpResponse('...')

                    def shizhengwen(request):
                        """生成验证码图片"""
                        # f = open('static/imgs/avatar/20130809170025.png','rb')
                        # data = f.read()
                        # f.close()

                        f = BytesIO()
                        img, code = create_validate_code()
                        request.session['check_code'] = code
                        img.save(f, 'PNG')
                        return HttpResponse(f.getvalue())
                                
            
        补充： 一个月免登陆
            当勾选上时:
            request.session.set_expiry(60 * 60 * 24 * 30)

            SESSION_COOKIE_AGE = 1209600 默认2周,全局
            
            
            
    6. 个人博客 

            个人主页：http://127.0.0.1:8000/scorch.html
            文章最终：http://127.0.0.1:8000/scorch/5.html 文章详细
            个人筛选：
                      http://127.0.0.1:8000/scorch/tag/2.html
                      http://127.0.0.1:8000/scorch/category/3.html
                      http://127.0.0.1:8000/scorch/date/2017-02.html
            
            注意：个人主题定制
            
            
            
            
        
        
        
        
        
        
        
        

        
        
        
        
        